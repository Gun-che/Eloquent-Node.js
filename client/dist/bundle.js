!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r=function(t,e){return fetch(t,e).then((function(t){if(t.status<400)return t;throw new Error(t.statusText)}))},o=function(t){return"talks/"+encodeURIComponent(t)},a=function(t){alert(String(t))},l=function(t,e,n,r){return new(n||(n=Promise))((function(o,a){function l(t){try{i(r.next(t))}catch(t){a(t)}}function u(t){try{i(r.throw(t))}catch(t){a(t)}}function i(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(l,u)}i((r=r.apply(t,e||[])).next())}))},u=function(t,e){var n,r,o,a,l={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return l.label++,{value:a[1],done:!1};case 5:l.label++,r=a[1],a=[0];continue;case 7:a=l.ops.pop(),l.trys.pop();continue;default:if(!(o=l.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){l=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){l.label=a[1];break}if(6===a[0]&&l.label<o[1]){l.label=o[1],o=a;break}if(o&&l.label<o[2]){l.label=o[2],l.ops.push(a);break}o[2]&&l.ops.pop(),l.trys.pop();continue}a=e.call(t,l)}catch(t){a=[6,t],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},i=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},c=function(t,e){for(var n,r,o=[],a=2;a<arguments.length;a++)o[a-2]=arguments[a];var l=document.createElement(t);e&&Object.assign(l,e);try{for(var u=i(o),c=u.next();!c.done;c=u.next()){var s=c.value;"string"!=typeof s?l.appendChild(s):l.appendChild(document.createTextNode(s))}}catch(t){n={error:t}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}return l},s=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),l=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)l.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return l},f=function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(s(arguments[e]));return t},p=function(t,e){return c.apply(void 0,f(["section",{className:"talk"},c("h2",null,t.title," ",c("button",{onclick:function(){e({type:"deleteTalk",talk:t.title})}},"Delete")),c("div",null,"by ",c("strong",null,t.presenter)),c("p",null,t.summary)],t.comments.map(y),[c("form",{onsubmit:function(n){n.preventDefault();var r=n.target;e({type:"newComment",talk:t.title,message:r.elements.comment.value}),r.reset()}},c("input",{type:"text",name:"comment"})," ",c("button",{type:"submit"},"Add comment"))]))};function y(t){return c("p",{className:"comment"},c("strong",null,t.autor),": ",t.message)}var d=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},m=function(){function t(t,e){this.dispatch=e,this.talkDOM=c("div",{className:"talks"}),this.dom=c("div",null,function(t,e){return c("label",{},"Your name",c("input",{type:"text",value:t,onchange:function(t){e({type:"setUser",user:t.target.value})}}))}(t.user,e),this.talkDOM,function(t){var e=c("input",{type:"text"}),n=c("input",{type:"text"});return c("form",{onsubmit:function(r){r.preventDefault(),t({type:"newTalk",title:e.value,summary:n.value}),r.target.reset()}},c("h3",null,"Submit a Talk"),c("label",null,"Title: ",e),c("label",null,"Summary: ",n),c("button",{type:"submit"},"Submit"))}(e)),this.syncState(t)}return t.prototype.syncState=function(t){var e,n;if(t.talks!=this.talks){this.talkDOM.textContent="";try{for(var r=d(t.talks),o=r.next();!o.done;o=r.next()){var a=o.value;this.talkDOM.appendChild(p(a,this.dispatch))}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}this.talks=t.talks}},t}(),h=function(){return(h=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};!function(){var t,e,n,i=localStorage.getItem("newUser")||"Anon";function c(n){t=function(t,e){return"setUser"===e.type?(localStorage.setItem("userName",e.user),h(h({},t),{user:e.user})):"setTalks"===e.type?h(h({},t),{talks:e.talks}):("newTalk"===e.type?r(o(e.title),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({presenter:t.user,summary:e.summary})}).catch(a):"deletTalk"===e.type?r(o(e.title),{method:"DELETE"}).catch(a):"newComment"===e.type&&r(o(e.title)+"/comments",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({author:t.user,message:e.message})}).catch(a),t)}(t,n),e.syncState(t)}(n=function(n){e?c({type:"setTalks",talks:n}):(e=new m(t={user:i,talks:n},c),document.body.appendChild(e.dom))},l(void 0,void 0,void 0,(function(){var t,e,o,a;return u(this,(function(l){switch(l.label){case 0:t=void 0,l.label=1;case 1:e=void 0,l.label=2;case 2:return l.trys.push([2,4,,6]),[4,r("/talks",{headers:t&&{"If-None-Match":t,Prefer:"wait=90"}})];case 3:return e=l.sent(),[3,6];case 4:return o=l.sent(),console.log("Request failed: "+o),[4,new Promise((function(t){return setTimeout(t,500)}))];case 5:return l.sent(),[3,8];case 6:return 304===e.status?[3,8]:(t=e.headers.get("Etag"),a=n,[4,e.json()]);case 7:a.apply(void 0,[l.sent()]),l.label=8;case 8:return[3,1];case 9:return[2]}}))}))).catch(a)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,